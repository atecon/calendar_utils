function strings iso8601_to_string (const numeric value "ISO8601 numeric date value",
                                    string target_format[null])
    /* Converts numeric ISO8601 date(s) (YYYYMMDD) to extended ISO8601 date string(s).
       Accepts scalar, series, or column vector matrix as input.
       Returns a bundle with a 'result' member containing the string(s).
       In case of error, returns empty string array (strings) at the corresponding position(s).

       Interesting formats are:
       - "%Ym%m", e.g. 1990m01
       - "%Y%m%d", e.g. 20200903
       - "%d-%m-%Y", e.g. 03-09-2020
       - "%d/%m/%Y", e.g. 03/09/2020
       - "%Y", e.g. 1984
       */

    strings Ret = array(0)
    string type_value = typename(value)
    string target_format = !exists(target_format) ? "%Y-%m-%d" : target_format

    if type_value == "scalar"
        catch string ret = strfday(epochday(value), target_format)
        if $error
            printf("Warning: Numeric value %d cannot be cast to date string in format '%s'.\n",
                    value, target_format)
            Ret += ""  # Return an empty string
        else
            Ret += ret
        endif
        return Ret

    elif type_value == "series"
        if sum(missing(value)) > 0
            print "Warning: Input series contains missing values. Cannot convert to date strings."
            # strfday() does not handle series with missing values
            Ret += ""  # Return an empty string
            return Ret
        endif

        series f = strfday(epochday(value), target_format)
        strings Ret = f
        if $error
            printf("Warning: Series value cannot be cast to date string in format '%s'.\n",
                    target_format)
            Ret += ""  # Return an empty string
        endif
        return Ret

    elif type_value == "matrix"
        matrix mat = vec(value)  # transform to column vector
        scalar n_values = nelem(mat)
        strings Ret = array(n_values)

        loop i=1..n_values
            catch string date = strfday(epochday(mat[i]), target_format)
            Ret[i] = $error ? "" : date
        endloop
        return Ret
    else
        errorif(TRUE, "Input must be scalar, series, or column vector matrix.")
    endif

    return out
end function

# TODO: Superseded by iso8601_to_string()
function string numeric_to_extended_iso8601 (const int value "ISO8601 numeric date value")
    /* Cast numeric ISO8601 date (YYYYMMDD) to extended ISO8601 date string.
    In case of an error, an empty string is returned. */

    catch string date = isodate(epochday(value), 1)
    if $error
        sprintf("ERROR: Numeric value %d cannot be cast to date string.", value)
        return ""
    endif

    return date
end function


# TODO: Superseded by iso8601_to_string()
function strings iso8601_to_dates (const series dates "Num. ISO8601 date")
    /* Based on a series in numeric iso8601 format, an array of strings in the extended ISO8601 format ("YYYY-MM-DD") is returned.
    Return empty string at the i-th position in case the i-th 'dates' entry
    has not the right format. */

    strings ret = array($nobs)

    loop i=1..nelem(ret)
        ret[i] = numeric_to_extended_iso8601(dates[i])
    endloop

    return ret
end function


function series dates_to_iso8601 (const series dates "Date string",
                                  const string date_format "e.g. %Y-%m-%d")
    /* Transforms a string-valued dates series to the numeric iso8601 format. Works for panel, time-series and cross-sectional data.
       return: Series holding cast values of 'dates' in the numeric ISO8601
       format (YYYYMMDD) in case of no error at the i-th entry. In case of an
    error at the i-th entry, return zero (FALSE).*/

    series iso8601 = NA
    smpl dates --no-missing

    if $version >= 20223
        series ed = strpday(dates, date_format)
        series iso8601 = isodate(ed)
    endif

    if $version < 20223
        loop i=$t1..$t2
            iso8601[i] = date_to_iso8601(dates[i], date_format)
        endloop
    endif

    smpl full

    return iso8601
end function


function scalar date_to_iso8601 (const string date "Date string",
                                 const string date_format "e.g. %Y-%m-%d")
    /* Transforms a date string to the numeric ISO8601 format.
    return: int, Numeric ISO8601 date if no error, otherwise zero (FALSE). */


    if $version < 20223
        catch scalar ed = strpday(dates, date_format)
    else
        catch scalar seconds = strptime(date, date_format)
    endif

    if $error
        printf "\nERROR: Either no valid date string or date format were passed.\n"
        return FALSE
    endif

    if $version < 20223
        return isodate(ed)
    else
        return atof(strftime(seconds, "%Y%m%d"))
    endif
end function


function scalar is_valid_date_delimiter (const string date)
    /* Check the delimiter of date components.
    return: int, TRUE if valid, otherwise FALSE. */

    if instring(date, ":")
        return TRUE
    endif

    return FALSE
end function


function string get_frequency_label (void)
    /* Retrieve label for given periodicity of the underlying time-series or panel dataset.
    return: string, Frequency label for a given periodicity. */

    if $datatype == 2
        pd = $pd
    elif $datatype == 3
        pd = $nobs / $pd  # TODO: not sure that works with non-daily data
    else
        funcerr "Dataset must be either of type time-series or panel."
    endif

    if pd == 4
        return "quarterly"
    elif pd == 12
        return "monthly"
    else
        errorif(TRUE, sprintf("Periodicity of the dataset (pd = %d) is not supported.", $pd))
    endif
end function


function scalar gdate_to_iso8601 (string date "Date string",
                                  string frequency[null] "Frequency of observation")
    /* This function supports monthly and quarterly date strings as used and accepted by gretl itself; basically only patterns like "1999:3" or "1999.3".

    return: int, Date string transformed to an integer representing the numeric ISO8601 format. */

    date = strstrip(strsub(date, ".", ":"))
    if exists(frequency)
        frequency = strstrip(tolower(frequency))
    else
        string frequency = get_frequency_label()
    endif

    scalar isok = is_valid_date_delimiter(date)
    errorif(!isok, "Not a recognized gretl date string. Must be of format '%d:%d' or '%d.%d'.")

    strings parts = strsplit(date, ":")
    errorif(nelem(parts) != 2, "Invalid date string input. Must be of format '%d:%d' or '%d.%d'")

    return get_iso_date(parts, frequency)
end function


function scalar get_iso_date (const strings parts,
                              const string frequency)
    /* Compile ISO8601 date integer value from 'parts'.
    return: int, Numeric date in ISO8601 format. */

    first = atof(parts[1])  # casts atof("01") -> 1
    second = atof(parts[2])

    check_frequency_ranges(first, second, frequency)

    if frequency == "quarterly"                 # construct the ISO output
        out  = first * 10000                    # year
        out += ((second - 1) * 3 + 1) * 100     # first month in quarter
        out += 1                                # first day in month
    elif frequency == "monthly"
        out  = first * 10000
        out += second * 100
        out += 1
    endif

    return out
end function


function void check_frequency_ranges (const int first,
                                      const int second,
                                      const string frequency)
    /* Check value ranges. Error if parameters are out of bounds. */

    if frequency == "quarterly"
        errorif(first < 1000 || first > 9999, "Year out of range")
        errorif(second < 1 || second > 4, "Quarter out of range")
    elif frequency == "monthly"
        errorif(first < 1000 || first > 9999, "Year out of range")
        errorif(second < 1 || second > 12, "Month out of range")
    else
        errorif(TRUE, sprintf("Frequency '%s' not supported.", frequency))
    endif
end function


function bundle datetime_components (const strings ts "Timestamp",
                                     string format[null] "Format timestamp, optional")
    /* Extract the date and time components of a datetime string, usually in
    the format "%Y-%m-%d %H:%M". If a seconds, '%S' are included, these
    are considered, too. */

    bundle self

    string self.format = exists(format) ? format : "%Y-%m-%d %H:%M"

    strings self.date = array(nelem(ts))
    matrix self.year = mshape(NA, nelem(ts))
    matrix self.month = mshape(NA, nelem(ts))
    matrix self.day = mshape(NA, nelem(ts))
    strings self.time = array(nelem(ts))
    matrix self.hour = mshape(NA, nelem(ts))
    matrix self.minute = mshape(NA, nelem(ts))
    matrix self.second1970 = mshape(NA, nelem(ts))
    if instring(self.format, "%S")
        matrix self.second = mshape(NA, nelem(ts))
    endif

    if $version <= 20222
        get_components_before_20223(ts, &self)
    else
        get_components_since_20223(ts, &self)
    endif

    return self
end function


function void get_components_since_20223 (const strings ts "Timestamp",
                                          bundle *self)
    /* Retrieve the date components. This function makes use of built-in functionalities since v20223. */

    self.second1970 = strptime(ts, self.format)
    self.date = strftime(self.second1970, "%Y-%m-%d")
    strings year_str = strftime(self.second1970, "%Y")
    strings month_str = strftime(self.second1970, "%m")
    strings day_str = strftime(self.second1970, "%d")
    strings hour_str = strftime(self.second1970, "%H")
    strings minute_str = strftime(self.second1970, "%M")

    if instring(self.format, "%S")
        second_str = strftime(self.second1970, "%S")
        self.time = strftime(self.second1970, "%H:%M:%S")
    else
        self.time = strftime(self.second1970, "%H:%M")
    endif

    # TODO: Once atof() supports arrays, this loop can be removed
    loop foreach i ts
        self.year[i] = atof(year_str[i])
        self.month[i] = atof(month_str[i])
        self.day[i] = atof(day_str[i])
        self.hour[i] = atof(hour_str[i])
        self.minute[i] = atof(minute_str[i])

        if instring(self.format, "%S")
            self.second[i] = atof(second_str[i])
        endif
    endloop
end function


function void get_components_before_20223 (const strings ts "Timestamp",
                                           bundle *self)
    /* Retrieve the date components. This function is for versions lower than 20223. */

    loop foreach i ts
        self.second1970[i] = strptime("$i", self.format)
        self.date[i] = strftime(self.second1970[i], "%Y-%m-%d")
        self.year[i] = atof(strftime(self.second1970[i], "%Y"))
        self.month[i] = atof(strftime(self.second1970[i], "%m"))
        self.day[i] = atof(strftime(self.second1970[i], "%d"))
        self.hour[i] = atof(strftime(self.second1970[i], "%H"))
        self.minute[i] = atof(strftime(self.second1970[i], "%M"))

        if instring(self.format, "%S")
            self.second[i] = atof(strftime(self.second1970[i], "%S"))
            self.time[i] = strftime(self.second1970[i], "%H:%M:%S")
        else
            self.time[i] = strftime(self.second1970[i], "%H:%M")
        endif
    endloop
end function


function string period_label_from_value (const scalar v,
                                         const string frequency,
                                         const bool quiet[TRUE])
    /* Helper: returns single label ("YYYYmM" or "YYYYqQ") or empty string on error. */

    if frequency != "monthly" && frequency != "quarterly"
        if !quiet
            printf("Warning: frequency '%s' not supported.\n", frequency)
        endif
        return ""
    endif

    if v <= 0
        return ""
    endif

    matrix ym = get_year_month(v)
    scalar y = int(ym[1,1])
    scalar m = int(ym[1,2])

    if m < 1 || m > 12
        return ""
    endif

    if frequency == "quarterly"
        scalar q = ceil(m / 3)
        return sprintf("%dq%d", y, q)
    else
        return sprintf("%dm%d", y, m)
    endif
end function


function matrix get_year_month (const matrix values "iso8601")
    /* Extract year and month from numeric ISO8601 dates. */

    matrix ret = mshape(NA, nelem(values), 2)
    ret[,1] = int(values ./ 10000)
    ret[,2] = int(values ./ 100) - (ret[,1] * 100)

    return ret
end function


function strings iso8601_to_period_labels (const numeric value "ISO8601 numeric date(s)",
                                          string frequency[null] "monthly|quarterly|auto (default)",
                                          const bool quiet[TRUE] "If TRUE, suppress warnings about unconvertible entries")
    /* Convert numeric ISO8601 date(s) (YYYYMMDD) to compact period labels.
       Accepts scalar, series or column-vector matrix.
       - monthly   -> "YYYYmM"   (month without leading zero, e.g. 2023m3)
       - quarterly -> "YYYYqQ"   (quarter number, e.g. 2023q1)
       - auto (default) -> for series: use $pd (time-series) or $panelpd (panel);
                           otherwise fall back to simple month-scan auto-detection.
    */

    strings Ret = array(0)
    string type_value = typename(value)
    string frequency = exists(frequency) ? tolower(strstrip(frequency)) : "auto"

    if type_value == "scalar"
        if frequency == "auto"
            matrix ym = get_year_month({value})
            scalar m = ym[1,2]
            frequency = (m==1 || m==4 || m==7 || m==10) ? "quarterly" : "monthly"
        endif
        string lab = period_label_from_value(value, frequency, quiet)
        if lab == "" && !quiet
            printf("Warning: numeric value %d cannot be converted to period label.\n", value)
        endif
        Ret += lab
        return Ret
    endif

    # Proceed with series and matrix typ
    set skip_missing off
    matrix mat = type_value == "series" ? {value} : vec(value)  # transform to column vector if matrix
    set skip_missing on
    scalar n_values = nelem(mat)
    Ret = array(n_values)
    if sum(!ok(mat)) > 0 && !quiet
        print "Warning: Input series contains missing values. Missing entries will be returned as empty strings."
    endif

    scalar pd = 0        # default assumption: cross-sectional case
    if type_value == "series"
        if $datatype == 2
            pd = $pd
        elif $datatype == 3
            pd = $panelpd
        endif
    endif

    if frequency == "auto" && pd == 0 # periodicity not determined, yet
        if pd == 4
            frequency = "quarterly"
        elif pd == 12
            frequency = "monthly"
        else
            /* fallback: scan months present in data */
            matrix seen = mshape(0, 12, 1)
            loop i=1..n_values
                scalar v = mat[i]
                if v <= 0 || !ok(v)
                    continue
                endif
                matrix ym = get_year_month({v})
                scalar m = ym[2]
                if m >=1 && m <= 12
                    seen[m] = 1
                endif
            endloop
            scalar cnt_q = seen[1] + seen[4] + seen[7] + seen[10]
            scalar tot_seen = sum(seen)
            frequency = (cnt_q == tot_seen && tot_seen > 0) ? "quarterly" : "monthly"
        endif

    else
        string frequency = pd == 4 ? "quarterly" : pd == 12 ? "monthly" : frequency
    endif

    frequency = frequency == "auto" ? "unsupported" : frequency

    # Actual conversion
    loop i=1..nelem(Ret)
        if mat[i] <= 0 || missing(mat[i])
            Ret[i] = ""
        else
            Ret[i] = period_label_from_value(mat[i], frequency, quiet)
            if Ret[i] == "" && !quiet
                printf("Warning: entry %d at pos %d cannot be converted to period label.\n",
                        mat[i], i)
            endif
        endif
    endloop

    return Ret
end function

