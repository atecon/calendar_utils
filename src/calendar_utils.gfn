<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="calendar_utils" no-data-ok="true" minver="2020c">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.2</version>
<date>2020-10-14</date>
<description>Collection of useful date time related tools</description>
<tags>C88</tags>
<help>
Collection of useful date time related tools.

Most functions are convenience functions for working with date strings and date string series.

Please ask questions and report bugs on the gretl mailing list if possible. Alternatively, create an issue ticket on the github repo (see below).
Source code and test script(s) can be found here:
https://github.com/atecon/calendar_utils



PUBLIC FUNCTIONS:
-----------------------------------------------------------------------
Function:       date_to_iso8601(const string date, const string date_format)

Arguments:
date:           string, Date string
date_format:    string, Format of 'date', e.g. &quot;%Y-%m-%d&quot;


Return:
Scalar value of cast 'date' in the ISO8601 format.
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       dates_to_iso8601(const series dates, const string date_format)

Arguments:
dates:          series, Series of date strings
date_format:    string, Format of 'date', e.g. &quot;%Y-%m-%d&quot;


Return:
Series holding cast values of 'dates' in the ISO8601 format.
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       create_iso8601_series(const scalar init_date)

Arguments:
init_date:      int, Initial date in ISO8601 format


Return:
Series holding a sequence of dates in the ISO8601 format starting with
'init_date'. The last date of the series created depends on the length
of the data set.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       numeric_to_extended_iso8601(const int date)

Arguments:
date:           int, Numeric date in ISO8601 format (YYYYMMDD)


Return:
Date string in the extended ISO8601 date format (YYYY-MM-DD). Return empty string in case 'date' has not the right format.
-----------------------------------------------------------------------


Changelog
---------
- v0.2, October 2020:
    + Add new function numeric_to_extended_iso8601()
- v0.1, October 2020:
    + Initial release
</help>
<gretl-function name="create_iso8601_series" type="series">
 <params count="1">
  <param name="init_date" type="scalar" const="true">
<description>numeric ISO8601</description>
  </param>
 </params>
<code>/* Return series with dates in ISO8601 format. 'init_date' refers to the initial date for the first observation, and the length of the data set determines the following recursive dates. Works for both time-series and panels. */
if $datatype == 3
  scalar N = $nobs/$pd
  scalar T = $pd
elif $datatype == 2
  return $obsdate
else
  funcerr &quot;Data must be either of panel or time-series type.&quot;
endif
string date_string = sprintf(&quot;%d&quot;, init_date)
errorif(strlen(date_string) != 8, &quot;Numeric ISO8601 date must comprise eight digits.&quot;)
scalar init_epoch_date = epochday(init_date)
scalar last_epoch_date = init_epoch_date + T - 1
matrix epoch_days_values = seq(init_epoch_date, last_epoch_date)'
series epoch_days = vec(ones(T, N) .* epoch_days_values)
series iso_date = isodate(epoch_days, 1)
return iso_date
</code>
</gretl-function>
<gretl-function name="dates_to_iso8601" type="series">
 <params count="2">
  <param name="dates" type="series" const="true">
<description>Date string</description>
  </param>
  <param name="date_format" type="string" const="true">
<description>e.g. %Y-%m-%d</description>
  </param>
 </params>
<code>/* Transforms a string-valued dates series to the numeric iso8601 format. Works for panel, time-series and cross-sectional data. */
series iso8601 = NA
smpl dates --no-missing
loop i = 1..nobs(dates)
  iso8601[i] = date_to_iso8601(dates[i], date_format)
endloop
smpl full
return iso8601
</code>
</gretl-function>
<gretl-function name="date_to_iso8601" type="scalar">
 <params count="2">
  <param name="date" type="string" const="true">
<description>Date string</description>
  </param>
  <param name="date_format" type="string" const="true">
<description>e.g. %Y-%m-%d</description>
  </param>
 </params>
<code>/* Transforms a date string to the numeric iso8601 format. */
scalar iso8601 = NA
scalar seconds = strptime(date, date_format)
iso8601 = atof(strftime(seconds, &quot;%Y%m%d&quot;))
return iso8601
</code>
</gretl-function>
<gretl-function name="numeric_to_extended_iso8601" type="string">
 <params count="1">
  <param name="value" type="int" const="true">
<description>ISO8601 numeric date value</description>
  </param>
 </params>
<code>/* Cast numeric ISO8601 date (YYYYMMDD) to extended ISO8601 date string.
In case of an error, an empty string is returned. */
string date
catch string date = isodate(epochday(value), 1)
if $error
  sprintf(&quot;Numeric value %d cannot be cast to date string.&quot;, value)
  return &quot;&quot;
endif
return date
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include calendar_utils.gfn

# Cast date string to numeric ISO8601 format
string date1 = &quot;2020-09-03&quot;
string date2 = &quot;20200903&quot;
string date3 = &quot;03-09-2020&quot;
string date4 = &quot;03/09/2020&quot;

scalar iso1 = date_to_iso8601(date1, &quot;%Y-%m-%d&quot;)
scalar iso2 = date_to_iso8601(date2, &quot;%Y%m%d&quot;)
scalar iso3 = date_to_iso8601(date3, &quot;%d-%m-%Y&quot;)
scalar iso4 = date_to_iso8601(date4, &quot;%d/%m/%Y&quot;)

print iso1 iso2 iso3 iso4


# Cast numeric ISO8601 format back to extended ISO8601 data string
string date1_cast = numeric_to_extended_iso8601(iso1)
string date2_cast = numeric_to_extended_iso8601(iso2)
string date3_cast = numeric_to_extended_iso8601(iso3)
string date4_cast = numeric_to_extended_iso8601(iso4)

print date1_cast date2_cast date3_cast date4_cast


/* Open some data set (here a panel with 2 cross-sectional units) and
create a series (sequence) of ISO8601 dates given some initial date. */
nulldata 6
scalar T = 3
setobs T 1:1 --stacked-time-series
series x = create_iso8601_series(20200101)
print x -o


/* Now assume you have a date string series but you want to cast these
string dates to numerical ISO8601 format. */
series z = seq(1, 3)' | seq(1, 3)'
strings dates = defarray(&quot;2020-09-01&quot;, &quot;2020-09-02&quot;, &quot;2020-09-03&quot;)
stringify(z, dates)

series y = dates_to_iso8601(z, &quot;%Y-%m-%d&quot;)
print z y -o
</sample-script>
</gretl-function-package>
</gretl-functions>
