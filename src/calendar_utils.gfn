<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="calendar_utils" no-data-ok="true" minver="2020c">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.3</version>
<date>2021-10-12</date>
<description>Collection of useful date time related tools</description>
<tags>C88</tags>
<help>
Collection of date time related tools.

Most functions are convenience functions for working with date strings and date
string series.

Please ask questions and report bugs on the gretl mailing list if possible.
Alternatively, create an issue ticket on the github repo (see below). Source
code and test script(s) can be found here:
https://github.com/atecon/calendar_utils



PUBLIC FUNCTIONS:
-----------------------------------------------------------------------
Function:       date_to_iso8601(const string date, const string date_format)

Arguments:
date:           string, Date string
date_format:    string, Format of 'date', e.g. &quot;%Y-%m-%d&quot;


Return:
Scalar value of cast 'date' in the numeric ISO8601 format (YYYYMMDD). Internally,
gretl's built-in functions strptime() and strftime() are used. See the help on
these functions for more details.

WARNING: Before gretl 2021e, there was a gretl bug in strptime() when the date
format passed did not consist of a month and day component, respectively. This
bug leads to a wrong date returned. See here:
https://gretlml.univpm.it/hyperkitty/list/gretl-devel@gretlml.univpm.it/message/6ENWKDGSYB32ZFKHENLPFJSS3X22JGYB/
To ensure correct results the caller should fully specify the input date,
including month and day of month (and month, day should also be present in the
format given).
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       dates_to_iso8601(const series dates, const string date_format)

Arguments:
dates:          series, Series of date strings
date_format:    string, Format of 'dates', e.g. &quot;%Y-%m-%d&quot;


Return:
Series holding cast values of 'dates' in the numeric ISO8601 format (YYYYMMDD).

WARNING: Before gretl 2021e, there was a gretl bug in strptime() when the date
format passed did not consist of a month and day component, respectively. This
bug leads to a wrong date returned. See here:
https://gretlml.univpm.it/hyperkitty/list/gretl-devel@gretlml.univpm.it/message/6ENWKDGSYB32ZFKHENLPFJSS3X22JGYB/
To ensure correct results the caller should fully specify the input date,
including month and day of month (and month, day should also be present in the
format given).
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       create_iso8601_series(const scalar init_date)

Arguments:
init_date:      int, Initial date in ISO8601 format


Return:
Series holding a sequence of dates in the numeric ISO8601 format (YYYYMMDD)
starting with 'init_date'. The last date of the series created depends on the
length of the data set.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       numeric_to_extended_iso8601(const int date)

Arguments:
date:           int, Numeric date in ISO8601 format (YYYYMMDD)


Return:
Date string in the extended ISO8601 date format (YYYY-MM-DD). Return empty
string in case 'date' has not the right format.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       gdate_to_iso8601(string date, string frequency[null])

Arguments:
date:           string, Date string in the gretl format, e.g. '%Y:%m' or '%Y.%m'
frequency:      string, Frequency of the date string, either 'monthly' or
                        'quarterly' (optional); if not specified, the
                        periodicity of the active dataset will be determined.


Return:
ISO8601 date integer (YYYYMMDD) if the 'frequency' is monthly or quarterly.
Internally, gretl's built-in functions strptime() and strftime() are used. See
the help on these functions for more details.
-----------------------------------------------------------------------

Changelog
---------
- v0.3, October 2021:
    + Improved help text
    + New gdate_to_iso8601() function
- v0.2, October 2020:
    + Add new function numeric_to_extended_iso8601()
- v0.1, October 2020:
    + Initial release
</help>
<gretl-function name="create_iso8601_series" type="series">
 <params count="1">
  <param name="init_date" type="scalar" const="true">
<description>numeric ISO8601</description>
  </param>
 </params>
<code>/* Return series with dates in ISO8601 format. 'init_date' refers to the initial date for the first observation, and the length of the data set determines the following recursive dates. Works for both time-series and panels. */
if $datatype == 3
  scalar N = $nobs/$pd
  scalar T = $pd
elif $datatype == 2
  return $obsdate
else
  funcerr &quot;Data must be either of panel or time-series type.&quot;
endif
string date_string = sprintf(&quot;%d&quot;, init_date)
errorif(strlen(date_string) != 8, &quot;Numeric ISO8601 date must comprise eight digits.&quot;)
scalar init_epoch_date = epochday(init_date)
scalar last_epoch_date = init_epoch_date + T - 1
matrix epoch_days_values = seq(init_epoch_date, last_epoch_date)'
series epoch_days = vec(ones(T, N) .* epoch_days_values)
series iso_date = isodate(epoch_days, 1)
return iso_date
</code>
</gretl-function>
<gretl-function name="dates_to_iso8601" type="series">
 <params count="2">
  <param name="dates" type="series" const="true">
<description>Date string</description>
  </param>
  <param name="date_format" type="string" const="true">
<description>e.g. %Y-%m-%d</description>
  </param>
 </params>
<code>/* Transforms a string-valued dates series to the numeric iso8601 format. Works for panel, time-series and cross-sectional data. */
series iso8601 = NA
smpl dates --no-missing
loop i = 1..nobs(dates)
  iso8601[i] = date_to_iso8601(dates[i], date_format)
endloop
smpl full
return iso8601
</code>
</gretl-function>
<gretl-function name="date_to_iso8601" type="scalar">
 <params count="2">
  <param name="date" type="string" const="true">
<description>Date string</description>
  </param>
  <param name="date_format" type="string" const="true">
<description>e.g. %Y-%m-%d</description>
  </param>
 </params>
<code>/* Transforms a date string to the numeric ISO8601 format.
return: int, Numeric ISO8601 date. */
print date
print date_format
scalar iso8601 = NA
scalar seconds = strptime(date, date_format)
iso8601 = atof(strftime(seconds, &quot;%Y%m%d&quot;))
return iso8601
</code>
</gretl-function>
<gretl-function name="numeric_to_extended_iso8601" type="string">
 <params count="1">
  <param name="value" type="int" const="true">
<description>ISO8601 numeric date value</description>
  </param>
 </params>
<code>/* Cast numeric ISO8601 date (YYYYMMDD) to extended ISO8601 date string.
In case of an error, an empty string is returned. */
string date
catch string date = isodate(epochday(value), 1)
if $error
  sprintf(&quot;Numeric value %d cannot be cast to date string.&quot;, value)
  return &quot;&quot;
endif
return date
</code>
</gretl-function>
<gretl-function name="gdate_to_iso8601" type="scalar">
 <params count="2">
  <param name="date" type="string">
<description>Date string</description>
  </param>
  <param name="frequency" type="string" optional="true">
<description>Frequency of observation</description>
  </param>
 </params>
<code>/* This function supports monthly and quarterly date strings as used and accepted by gretl itself; basically only patterns like &quot;1999:3&quot; or &quot;1999.3&quot;.
return: int, Date string transformed to an integer representing the numeric ISO8601 format. */
date = strstrip(strsub(date, &quot;.&quot;, &quot;:&quot;))
if exists(frequency)
  frequency = strstrip(tolower(frequency))
else
  string frequency = get_frequency_label()
endif
scalar isok = is_valid_date_delimiter(date)
errorif(!isok, &quot;Not a recognized gretl date string. Must be of format '%d:%d' or '%d.%d'.&quot;)
strings parts = strsplit(date, &quot;:&quot;)
errorif(nelem(parts) != 2, &quot;Invalid date string input. Must be of format '%d:%d' or '%d.%d'&quot;)
return get_iso_date(parts, frequency)
</code>
</gretl-function>
<gretl-function name="is_valid_date_delimiter" type="scalar" private="1">
 <params count="1">
  <param name="date" type="string" const="true"/>
 </params>
<code>/* Check the delimiter of date components.
return: int, TRUE if valid, otherwise FALSE. */
if instring(date, &quot;:&quot;)
  return TRUE
endif
return FALSE
</code>
</gretl-function>
<gretl-function name="get_frequency_label" type="string" private="1">
<code>/* Retrieve label for given periodicity of the underlying time-series or panel dataset.
return: string, Frequency label for a given periodicity. */
if $datatype == 2
  pd = $pd
elif $datatype == 3
  pd = $nobs / $pd
else
  funcerr(&quot;Dataset must be either of type time-series or panel.&quot;)
endif
if pd == 4
  return &quot;quarterly&quot;
elif pd == 12
  return &quot;monthly&quot;
else
  funcerr(sprintf(&quot;Periodicity of the dataset (pd = %d) is not supported.&quot;, $pd))
endif
</code>
</gretl-function>
<gretl-function name="get_iso_date" type="scalar" private="1">
 <params count="2">
  <param name="parts" type="strings" const="true"/>
  <param name="frequency" type="string" const="true"/>
 </params>
<code>/* Compile ISO8601 date integer value from 'parts'.
return: int, Numeric date in ISO8601 format. */
first = atof(parts[1])  # atof(&quot;01&quot;) -&gt; 1
second = atof(parts[2])
check_frequency_ranges(first, second, frequency)
if frequency == &quot;quarterly&quot;                 # construct the ISO output
  out  = first * 10000                    # year
  out += ((second - 1) * 3 + 1) * 100     # first month in quarter
  out += 1                                # first day in month
elif frequency == &quot;monthly&quot;
  out  = first * 10000
  out += second * 100
  out += 1
endif
return out
</code>
</gretl-function>
<gretl-function name="check_frequency_ranges" type="void" private="1">
 <params count="3">
  <param name="first" type="int" const="true"/>
  <param name="second" type="int" const="true"/>
  <param name="frequency" type="string" const="true"/>
 </params>
<code>/* Check value ranges. Error if parameters are out of bounds. */
if frequency == &quot;quarterly&quot;
  errorif(first &lt; 1000 || first &gt; 9999, &quot;Year out of range&quot;)
  errorif(second &lt; 1 || second &gt; 4, &quot;Quarter out of range&quot;)
elif frequency == &quot;monthly&quot;
  errorif(first &lt; 1000 || first &gt; 9999, &quot;Year out of range&quot;)
  errorif(second &lt; 1 || second &gt; 12, &quot;Month out of range&quot;)
else
  funcerr(sprintf(&quot;Frequency '%s' not supported.&quot;, frequency))
endif
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include calendar_utils.gfn

# Cast date string to numeric ISO8601 format
string date1 = &quot;2020-09-03&quot;
string date2 = &quot;20200903&quot;
string date3 = &quot;03-09-2020&quot;
string date4 = &quot;03/09/2020&quot;

scalar iso1 = date_to_iso8601(date1, &quot;%Y-%m-%d&quot;)
scalar iso2 = date_to_iso8601(date2, &quot;%Y%m%d&quot;)
scalar iso3 = date_to_iso8601(date3, &quot;%d-%m-%Y&quot;)
scalar iso4 = date_to_iso8601(date4, &quot;%d/%m/%Y&quot;)

print iso1 iso2 iso3 iso4


# Cast numeric ISO8601 format back to extended ISO8601 data string
string date1_cast = numeric_to_extended_iso8601(iso1)
string date2_cast = numeric_to_extended_iso8601(iso2)
string date3_cast = numeric_to_extended_iso8601(iso3)
string date4_cast = numeric_to_extended_iso8601(iso4)

print date1_cast date2_cast date3_cast date4_cast


/* Open some data set (here a panel with 2 cross-sectional units) and
create a series (sequence) of ISO8601 dates given some initial date. */
nulldata 6
scalar T = 3
setobs T 1:1 --stacked-time-series
series x = create_iso8601_series(20200101)
print x -o


/* Now assume you have a date string series but you want to cast these
string dates to numerical ISO8601 format. */
series z = seq(1, 3)' | seq(1, 3)'
strings dates = defarray(&quot;2020-09-01&quot;, &quot;2020-09-02&quot;, &quot;2020-09-03&quot;)
stringify(z, dates)

series y = dates_to_iso8601(z, &quot;%Y-%m-%d&quot;)
print z y -o


/* You may also want to use gretl's date format for date strings. */
eval gdate_to_iso8601(&quot;1994:1&quot;, &quot;monthly&quot;)
eval gdate_to_iso8601(&quot;1994:1&quot;, &quot;quarterly&quot;)
eval gdate_to_iso8601(&quot;1994.12&quot;, &quot;monthly&quot;)

/*  If the active dataset is of type panel or time-series, the frequency
is internally determined. */
setobs 12 2020:1 --time-series  # monthly frequency
eval gdate_to_iso8601(&quot;1994:1&quot;)
eval gdate_to_iso8601(&quot;1994:1&quot;)
eval gdate_to_iso8601(&quot;1994.12&quot;)
</sample-script>
</gretl-function-package>
</gretl-functions>
