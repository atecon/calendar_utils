<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="calendar_utils" no-data-ok="true" minver="2020c">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.5</version>
<date>2022-12-26</date>
<description>Collection of useful date time related tools</description>
<tags>C88</tags>
<help>
Collection of date time related tools.

Most functions are convenience functions for working with date strings and date
string series.

Please ask questions and report bugs on the gretl mailing list if possible.
Alternatively, create an issue ticket on the github repo (see below). Source
code and test script(s) can be found here:
https://github.com/atecon/calendar_utils



PUBLIC FUNCTIONS:
-----------------------------------------------------------------------
Function:       date_to_iso8601(const string date, const string date_format)

Arguments:
date:           string, Date string
date_format:    string, Format of 'date', e.g. &quot;%Y-%m-%d&quot;


Return:
Scalar value of cast 'date' in the numeric ISO8601 format (YYYYMMDD) in case of
no error. In case of an error, return zero (FALSE).
Internally, gretl's built-in functions strptime() and strftime() are used. See
the help on these functions for more details.

WARNING: Before gretl 2021e, there was a gretl bug in strptime() when the date
format passed did not consist of a month and day component, respectively. This
bug leads to a wrong date returned. See here:
https://gretlml.univpm.it/hyperkitty/list/gretl-devel@gretlml.univpm.it/message/6ENWKDGSYB32ZFKHENLPFJSS3X22JGYB/
To ensure correct results the caller should fully specify the input date,
including month and day of month (and month, day should also be present in the
format given).
-----------------------------------------------------------------------

-----------------------------------------------------------------------
Function:       dates_to_iso8601(const series dates, const string date_format)

Arguments:
dates:          series, Series of date strings
date_format:    string, Format of 'dates', e.g. &quot;%Y-%m-%d&quot;


Return:
Series holding cast values of 'dates' in the numeric ISO8601 format (YYYYMMDD)
in case of no error at the i-th entry. In case of an error at the i-th entry,
return zero (FALSE).

WARNING: Up to gretl version 2021d, there was a gretl bug in strptime() when
the date format passed did not consist of a month and day component,
respectively. This bug leads to a wrong date returned. See here:
https://gretlml.univpm.it/hyperkitty/list/gretl-devel@gretlml.univpm.it/message/6ENWKDGSYB32ZFKHENLPFJSS3X22JGYB/
To ensure correct results the caller should fully specify the input date,
including month and day of month (and month, day should also be present in the
format given).
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       iso8601_to_dates(const series dates)

Arguments:
dates:          series, Series of numeric ISO8601 dates


Return:
String array holding cast values of 'dates' in extended ISO8601 format
(default: YYYY-MM-DD). Missing values in 'dates' are handled as an empty
string in the returned array. This is a kind of reverse function to the
dates_to_iso8601() function.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       create_iso8601_series(const scalar init_date)

REMOVED SINCE VERSION 0.5.

Use gretl's built-in facility instead. To be concrete, set the dataset
structure by means of the 'setobs' command. For a daily time-series by:
  &lt;setobs 7 2020-01-01 --time-series&gt;
and for a panel dataset with daily frequency by:
    &lt;setobs 7 2020-01-01 --panel-time&gt;
The numeric ISO8601 series can be obtained by the accessor '$obsdate'.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       numeric_to_extended_iso8601(const int date)

Arguments:
date:           int, Numeric date in ISO8601 format (YYYYMMDD)


Return:
Date string in the extended ISO8601 date format (YYYY-MM-DD). Return empty
string at the i-th position in case the i-th 'dates' entry has not the right
format.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       gdate_to_iso8601(string date, string frequency[null])

Arguments:
date:           string, Date string in the gretl format, e.g. '%Y:%m' or
                '%Y.%m'
frequency:      string, Frequency of the date string, either 'monthly' or
                        'quarterly' (optional); if not specified, the
                        periodicity of the active dataset will be determined.


Return:
ISO8601 date integer (YYYYMMDD) if the 'frequency' is monthly or quarterly.
Internally, gretl's built-in functions strptime() and strftime() are used. See
the help on these functions for more details.
-----------------------------------------------------------------------


-----------------------------------------------------------------------
Function:       datetime_components(const strings ts, string format[null])

Extract the date and time components of a datetime string (timestamp).

Arguments:
ts:             strings, Datetime string (timestamp)
format:         string, Format of timestamp; default: &quot;%Y-%m-%d %H:%M&quot;


Return:
Bundle including various components:
  dates:        strings, Dates in the extended ISO8601 format (%Y-%m-%d)
  seconds1970:  matrix, Column vector holding the number of seconds since the
                start of 1970 according to Coordinated Universal Time (see
                also gretl's strptime() function)
  times:        strings, Array of time strings in the format %H:%M and ':%s'
                if 'format' includes seconds.
  hours:        matrix, Column vector holding hourly values.
  minutes:      matrix, Column vector holding minute values.
  seconds:      matrix, Column vector holding the second values if available.
-----------------------------------------------------------------------


Changelog
---------
- v0.5, December 2023:
    + Add new datetime_components() function
    + Remove function create_iso8601_series() and add a hint on how to mimic
      the function using gretl commands.
    + Both dates_to_iso8601() and date_to_iso8601() catch an eventual error
      and return zero in this error case.
- v0.4, January 2022:
    + New iso8601_to_dates() function
- v0.3, October 2021:
    + Improved help text
    + New gdate_to_iso8601() function
- v0.2, October 2020:
    + Add new function numeric_to_extended_iso8601()
- v0.1, October 2020:
    + Initial release
</help>
<gretl-function name="dates_to_iso8601" type="series">
 <params count="2">
  <param name="dates" type="series" const="true">
<description>Date string</description>
  </param>
  <param name="date_format" type="string" const="true">
<description>e.g. %Y-%m-%d</description>
  </param>
 </params>
<code>/* Transforms a string-valued dates series to the numeric iso8601 format. Works for panel, time-series and cross-sectional data.
return: Series holding cast values of 'dates' in the numeric ISO8601
format (YYYYMMDD) in case of no error at the i-th entry. In case of an
error at the i-th entry, return zero (FALSE).*/
series iso8601 = NA
smpl dates --no-missing
loop i = 1..nobs(dates)
  iso8601[i] = date_to_iso8601(dates[i], date_format)
endloop
smpl full
return iso8601
</code>
</gretl-function>
<gretl-function name="date_to_iso8601" type="scalar">
 <params count="2">
  <param name="date" type="string" const="true">
<description>Date string</description>
  </param>
  <param name="date_format" type="string" const="true">
<description>e.g. %Y-%m-%d</description>
  </param>
 </params>
<code>/* Transforms a date string to the numeric ISO8601 format.
return: int, Numeric ISO8601 date if no error, otherwise zero (FALSE). */
scalar iso8601 = NA
catch scalar seconds = strptime(date, date_format)
if $error
  printf &quot;\nERROR: Either no valid date string or date format were passed.\n&quot;
  return FALSE
endif
iso8601 = atof(strftime(seconds, &quot;%Y%m%d&quot;))
return iso8601
</code>
</gretl-function>
<gretl-function name="numeric_to_extended_iso8601" type="string">
 <params count="1">
  <param name="value" type="int" const="true">
<description>ISO8601 numeric date value</description>
  </param>
 </params>
<code>/* Cast numeric ISO8601 date (YYYYMMDD) to extended ISO8601 date string.
In case of an error, an empty string is returned. */
catch string date = isodate(epochday(value), 1)
if $error
  sprintf(&quot;ERROR: Numeric value %d cannot be cast to date string.&quot;, value)
  return &quot;&quot;
endif
return date
</code>
</gretl-function>
<gretl-function name="gdate_to_iso8601" type="scalar">
 <params count="2">
  <param name="date" type="string">
<description>Date string</description>
  </param>
  <param name="frequency" type="string" optional="true">
<description>Frequency of observation</description>
  </param>
 </params>
<code>/* This function supports monthly and quarterly date strings as used and accepted by gretl itself; basically only patterns like &quot;1999:3&quot; or &quot;1999.3&quot;.
return: int, Date string transformed to an integer representing the numeric ISO8601 format. */
date = strstrip(strsub(date, &quot;.&quot;, &quot;:&quot;))
if exists(frequency)
  frequency = strstrip(tolower(frequency))
else
  string frequency = get_frequency_label()
endif
scalar isok = is_valid_date_delimiter(date)
errorif(!isok, &quot;Not a recognized gretl date string. Must be of format '%d:%d' or '%d.%d'.&quot;)
strings parts = strsplit(date, &quot;:&quot;)
errorif(nelem(parts) != 2, &quot;Invalid date string input. Must be of format '%d:%d' or '%d.%d'&quot;)
return get_iso_date(parts, frequency)
</code>
</gretl-function>
<gretl-function name="iso8601_to_dates" type="strings">
 <params count="1">
  <param name="dates" type="series" const="true">
<description>Num. ISO8601 date</description>
  </param>
 </params>
<code>/* Based on a series in numeric iso8601 format, an array of strings in the extended ISO8601 format (&quot;YYYY-MM-DD&quot;) is returned.
Return empty string at the i-th position in case the i-th 'dates' entry
has not the right format. */
strings ret = array($nobs)
loop i=1..nelem(ret)
  ret[i] = numeric_to_extended_iso8601(dates[i])
endloop
return ret
</code>
</gretl-function>
<gretl-function name="datetime_components" type="bundle">
 <params count="2">
  <param name="ts" type="strings" const="true">
<description>Timestamp</description>
  </param>
  <param name="format" type="string" optional="true">
<description>Format timestamp, optional</description>
  </param>
 </params>
<code>/* Extract the date and time components of a datetime string, usually in
the format &quot;%Y-%m-%d %H:%M&quot;. If a seconds, '%S' are included, these
are considered, too. */
bundle self
string self.format = exists(format) ? format : &quot;%Y-%m-%d %H:%M&quot;
strings self.dates = array(nelem(ts))
strings self.times = array(nelem(ts))
matrix self.hours = mshape(NA, nelem(ts))
matrix self.minutes = mshape(NA, nelem(ts))
matrix self.seconds1970 = mshape(NA, nelem(ts))
if instring(self.format, &quot;%S&quot;)
  matrix self.seconds = mshape(NA, nelem(ts))
endif
loop foreach i ts
  self.seconds1970[i] = strptime(&quot;$i&quot;, self.format)
  self.dates[i] = strftime(self.seconds1970[i], &quot;%Y-%m-%d&quot;)
  self.hours[i] = atof(strftime(self.seconds1970[i], &quot;%H&quot;))
  self.minutes[i] = atof(strftime(self.seconds1970[i], &quot;%M&quot;))
  if instring(self.format, &quot;%S&quot;)
    self.seconds[i] = atof(strftime(self.seconds1970[i], &quot;%S&quot;))
    self.times[i] = strftime(self.seconds1970[i], &quot;%H:%M:%S&quot;)
  else
    self.times[i] = strftime(self.seconds1970[i], &quot;%H:%M&quot;)
  endif
endloop
return self
</code>
</gretl-function>
<gretl-function name="is_valid_date_delimiter" type="scalar" private="1">
 <params count="1">
  <param name="date" type="string" const="true"/>
 </params>
<code>/* Check the delimiter of date components.
return: int, TRUE if valid, otherwise FALSE. */
if instring(date, &quot;:&quot;)
  return TRUE
endif
return FALSE
</code>
</gretl-function>
<gretl-function name="get_frequency_label" type="string" private="1">
<code>/* Retrieve label for given periodicity of the underlying time-series or panel dataset.
return: string, Frequency label for a given periodicity. */
if $datatype == 2
  pd = $pd
elif $datatype == 3
  pd = $nobs / $pd  # TODO: not sure that works with non-daily data
else
  funcerr &quot;Dataset must be either of type time-series or panel.&quot;
endif
if pd == 4
  return &quot;quarterly&quot;
elif pd == 12
  return &quot;monthly&quot;
else
  errorif(TRUE, sprintf(&quot;Periodicity of the dataset (pd = %d) is not supported.&quot;, $pd))
endif
</code>
</gretl-function>
<gretl-function name="get_iso_date" type="scalar" private="1">
 <params count="2">
  <param name="parts" type="strings" const="true"/>
  <param name="frequency" type="string" const="true"/>
 </params>
<code>/* Compile ISO8601 date integer value from 'parts'.
return: int, Numeric date in ISO8601 format. */
first = atof(parts[1])  # casts atof(&quot;01&quot;) -&gt; 1
second = atof(parts[2])
check_frequency_ranges(first, second, frequency)
if frequency == &quot;quarterly&quot;                 # construct the ISO output
  out  = first * 10000                    # year
  out += ((second - 1) * 3 + 1) * 100     # first month in quarter
  out += 1                                # first day in month
elif frequency == &quot;monthly&quot;
  out  = first * 10000
  out += second * 100
  out += 1
endif
return out
</code>
</gretl-function>
<gretl-function name="check_frequency_ranges" type="void" private="1">
 <params count="3">
  <param name="first" type="int" const="true"/>
  <param name="second" type="int" const="true"/>
  <param name="frequency" type="string" const="true"/>
 </params>
<code>/* Check value ranges. Error if parameters are out of bounds. */
if frequency == &quot;quarterly&quot;
  errorif(first &lt; 1000 || first &gt; 9999, &quot;Year out of range&quot;)
  errorif(second &lt; 1 || second &gt; 4, &quot;Quarter out of range&quot;)
elif frequency == &quot;monthly&quot;
  errorif(first &lt; 1000 || first &gt; 9999, &quot;Year out of range&quot;)
  errorif(second &lt; 1 || second &gt; 12, &quot;Month out of range&quot;)
else
  errorif(TRUE, sprintf(&quot;Frequency '%s' not supported.&quot;, frequency))
endif
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include calendar_utils.gfn

# Cast date string to numeric ISO8601 format
string date1 = &quot;2020-09-03&quot;
string date2 = &quot;20200903&quot;
string date3 = &quot;03-09-2020&quot;
string date4 = &quot;03/09/2020&quot;

scalar iso1 = date_to_iso8601(date1, &quot;%Y-%m-%d&quot;)
scalar iso2 = date_to_iso8601(date2, &quot;%Y%m%d&quot;)
scalar iso3 = date_to_iso8601(date3, &quot;%d-%m-%Y&quot;)
scalar iso4 = date_to_iso8601(date4, &quot;%d/%m/%Y&quot;)

print iso1 iso2 iso3 iso4

# Cast numeric ISO8601 format back to extended ISO8601 data string
string date1_cast = numeric_to_extended_iso8601(iso1)
string date2_cast = numeric_to_extended_iso8601(iso2)
string date3_cast = numeric_to_extended_iso8601(iso3)
string date4_cast = numeric_to_extended_iso8601(iso4)

print date1_cast date2_cast date3_cast date4_cast


/* Suppose you have series of dates in the numeric ISO8601 format.
And you want to create an array of strings in the extended ISO8601
format (&quot;YYYY-MM-DD&quot;) which can be used to for &quot;stringifying&quot; a series,
too. */
nulldata 3
series input = {20220101, NA, 20220103}'
strings dates = iso8601_to_dates(input)
series x = dates        # Cast as series

print dates
print input x -o


/* Now assume you have a date string series but you want to cast these
string dates to numerical ISO8601 format. */
nulldata 6
series z = seq(1, 3)' | seq(1, 3)'
strings dates = defarray(&quot;2020-09-01&quot;, &quot;2020-09-02&quot;, &quot;2020-09-03&quot;)
stringify(z, dates)

series y = dates_to_iso8601(z, &quot;%Y-%m-%d&quot;)
print z y -o


/* You may also want to use gretl's date format for date strings. */
eval gdate_to_iso8601(&quot;1994:1&quot;, &quot;monthly&quot;)
eval gdate_to_iso8601(&quot;1994:1&quot;, &quot;quarterly&quot;)
eval gdate_to_iso8601(&quot;1994.12&quot;, &quot;monthly&quot;)

/*  If the active dataset is of type panel or time-series, the frequency
is internally determined. */
setobs 12 2020:1 --time-series  # monthly frequency
eval gdate_to_iso8601(&quot;1994:1&quot;)
eval gdate_to_iso8601(&quot;1994:1&quot;)
eval gdate_to_iso8601(&quot;1994.12&quot;)


# Datetime components
nulldata 2
# with seconds
strings ts = defarray(&quot;2022-12-07 00:00:33&quot;, &quot;2022-12-13 14:43:12&quot;)
string format = &quot;%Y-%m-%d %H:%M:%S&quot;
bundle B = datetime_components(ts, format)
print B

series hours = B.hours
series minutes = B.minutes
series dates = B.dates
series seconds1970 = B.seconds1970
print dates hours minutes seconds1970 -o
</sample-script>
</gretl-function-package>
</gretl-functions>
