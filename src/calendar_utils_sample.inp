clear
set verbose off

include calendar_utils.gfn

# Cast date string to numeric ISO8601 format
string date1 = "2020-09-03"
string date2 = "20200903"
string date3 = "03-09-2020"
string date4 = "03/09/2020"

scalar iso1 = date_to_iso8601(date1, "%Y-%m-%d")
scalar iso2 = date_to_iso8601(date2, "%Y%m%d")
scalar iso3 = date_to_iso8601(date3, "%d-%m-%Y")
scalar iso4 = date_to_iso8601(date4, "%d/%m/%Y")

print iso1 iso2 iso3 iso4


# Cast numeric ISO8601 format back to extended ISO8601 data string
string date1_cast = numeric_to_extended_iso8601(iso1)
string date2_cast = numeric_to_extended_iso8601(iso2)
string date3_cast = numeric_to_extended_iso8601(iso3)
string date4_cast = numeric_to_extended_iso8601(iso4)

print date1_cast date2_cast date3_cast date4_cast


/* Open some data set (here a panel with 2 cross-sectional units) and
create a series (sequence) of ISO8601 dates given some initial date. */
nulldata 6
scalar T = 3
setobs T 1:1 --stacked-time-series
series x = create_iso8601_series(20200101)
print x -o


/* Now assume you have a date string series but you want to cast these
string dates to numerical ISO8601 format. */
series z = seq(1, 3)' | seq(1, 3)'
strings dates = defarray("2020-09-01", "2020-09-02", "2020-09-03")
stringify(z, dates)

series y = dates_to_iso8601(z, "%Y-%m-%d")
print z y -o


/* You may also want to use gretl's date format for date strings. */
eval gdate_to_iso8601("1994:1", "monthly")
eval gdate_to_iso8601("1994:1", "quarterly")
eval gdate_to_iso8601("1994.12", "monthly")

/*  If the active dataset is of type panel or time-series, the frequency
is internally determined. */
setobs 12 2020:1 --time-series  # monthly frequency
eval gdate_to_iso8601("1994:1")
eval gdate_to_iso8601("1994:1")
eval gdate_to_iso8601("1994.12")
