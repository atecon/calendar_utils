set verbose off
set assert stop
clear

include ./src/calendar_utils.inp --force


function void test_date_to_iso8601 (void)
    print "Start testing date_to_iso8601()."

    string date1 = "2020-09-03"
    string date2 = "20200903"
    string date3 = "03-09-2020"
    string date4 = "03/09/2020"
    string date5 = "1984"

    scalar iso1 = date_to_iso8601(date1, "%Y-%m-%d")
    scalar iso2 = date_to_iso8601(date2, "%Y%m%d")
    scalar iso3 = date_to_iso8601(date3, "%d-%m-%Y")
    scalar iso4 = date_to_iso8601(date4, "%d/%m/%Y")
    scalar iso5 = date_to_iso8601("1984", "%Y") # bug in gretl before 2020e

    assert(iso1 == 20200903)
    assert(iso2 == 20200903)
    assert(iso3 == 20200903)
    assert(iso4 == 20200903)
    assert(iso5 == 19840101)
end function
test_date_to_iso8601()


nulldata 3
function void test_dates_to_iso8601 (void)
    print "Start with dates_to_iso8601()."

    series x = seq(1, $nobs)'
    strings dates = defarray("2020-09-01", "2020-09-02", "2020-12-01")
    stringify(x, dates)

    series actual = dates_to_iso8601(x, "%Y-%m-%d")

    assert(actual[1] == 20200901)
    assert(actual[2] == 20200902)
    assert(actual[3] == 20201201)

    delete x --force
    series x = seq(1, $nobs)'
    strings dates = defarray("01-09-2020", "02-09-2020", "03-09-2020")
    stringify(x, dates)

    series actual = dates_to_iso8601(x, "%d-%m-%Y")

    assert(actual[1] == 20200901)
    assert(actual[2] == 20200902)
    assert(actual[3] == 20200903)
end function
test_dates_to_iso8601()


nulldata 6
series y = normal()
scalar T = 3
setobs T 1:1 --stacked-time-series
function void test_dates_to_iso8601_panel (void)
    print "Start with dates_to_iso8601() for panel."

    series x = seq(1, 3)' | seq(1, 3)'
    strings dates = defarray("2020-09-01", "2020-09-02", "2020-09-03")
    stringify(x, dates)

    series actual = dates_to_iso8601(x, "%Y-%m-%d")

    assert(actual[1] == 20200901)
    assert(actual[2] == 20200902)
    assert(actual[3] == 20200903)
    assert(actual[4] == 20200901)
    assert(actual[5] == 20200902)
    assert(actual[6] == 20200903)

    delete x --force
    series x = seq(1, 3)' | seq(1, 3)'
    strings dates = defarray("01-09-2020", "02-09-2020", "03-09-2020")
    stringify(x, dates)

    series actual = dates_to_iso8601(x, "%d-%m-%Y")

    assert(actual[1] == 20200901)
    assert(actual[2] == 20200902)
    assert(actual[3] == 20200903)
    assert(actual[4] == 20200901)
    assert(actual[5] == 20200902)
    assert(actual[6] == 20200903)
end function
test_dates_to_iso8601_panel()


function void test_numeric_to_ext_iso8601 (void)
    print "Start with numeric_to_extended_iso8601()."

    scalar date1 = 19710130
    scalar date2 = 18440728
    scalar date3 = 20201014
    scalar date4 = 20201410

    assert(numeric_to_extended_iso8601(date1) == "1971-01-30")
    assert(numeric_to_extended_iso8601(date2) == "1844-07-28")
    assert(numeric_to_extended_iso8601(date3) == "2020-10-14")
    assert(numeric_to_extended_iso8601(date4) == "")
end function
test_numeric_to_ext_iso8601()


function void test_iso8601_to_string_scalar (void)
    print "Start with iso8601_to_string() for scalar series."

    scalar date1 = 19710130
    scalar date2 = 18440728
    scalar date3 = 20201014
    scalar date4 = 20201410

    string date_format = "%Y-%m-%d"
    string date1_got = iso8601_to_string(date1, date_format)[1]
    string date2_got = iso8601_to_string(date2, date_format)[1]
    string date3_got = iso8601_to_string(date3, date_format)[1]
    string date4_got = iso8601_to_string(date4, date_format)[1]

    assert(date1_got == "1971-01-30")
    assert(date2_got == "1844-07-28")
    assert(date3_got == "2020-10-14")
    assert(date4_got == "")


    # Different date format
    date_format = "%d-%m-%Y"
    string date1_got = iso8601_to_string(date1, date_format)[1]
    string date2_got = iso8601_to_string(date2, date_format)[1]
    string date3_got = iso8601_to_string(date3, date_format)[1]
    string date4_got = iso8601_to_string(date4, date_format)[1]

    assert(date1_got == "30-01-1971")
    assert(date2_got == "28-07-1844")
    assert(date3_got == "14-10-2020")
    assert(date4_got == "")
end function
test_iso8601_to_string_scalar()


function void test_iso8601_to_string_matrix (void)
    print "Start with iso8601_to_string() for matrix input."

    matrix dates1 = {19710130, 18440728}
    matrix dates2 = {19710130; NA; 18440728}

    string date_format = "%Y-%m-%d"
    strings dates1_got = iso8601_to_string(dates1, date_format)
    strings dates2_got = iso8601_to_string(dates2, date_format)

    assert(dates1_got[1] == "1971-01-30")
    assert(dates1_got[2] == "1844-07-28")
    assert(nelem(dates1_got) == nelem(dates1))  # same length
    # 2nd vector
    assert(dates2_got[1] == "1971-01-30")
    assert(dates2_got[2] == "")
    assert(dates2_got[3] == "1844-07-28")
    assert(nelem(dates2_got) == nelem(dates2))  # same length
end function
test_iso8601_to_string_matrix()


nulldata 3 --preserve
function void test_iso8601_to_string_series (void)
    print "Start with iso8601_to_string_series()."

    # Given
    series input = {20220101, 20220102, 20220103}'
    string date_format = "%Y-%m-%d"
    strings expected = defarray("2022-01-01",
                                "2022-01-02",
                                "2022-01-03")
    # When
    strings actual = iso8601_to_string(input, date_format)
    # Then
    loop i=1..nelem(expected)
        assert(actual[i] == expected[i])
    endloop
    assert(nelem(actual) == nelem(expected))
    print "Successful for first test part."

    # For different date format and NAs
    date_format = "%d-%m-%Y"
    series input = {20220101, 20220102, 20220103}'
    strings expected = defarray("01-01-2022",\
                                "02-01-2022",\
                                "03-01-2022")
    strings actual = iso8601_to_string(input, date_format)
    loop i=1..nelem(expected)
        assert(actual[i] == expected[i])
    endloop
    assert(nelem(actual) == nelem(expected))
    print "Successful for second test part."

    # For different date format and NAs
    date_format = "%Ym%m"
    series input = {20220101, 20220201, 20220301}'
    strings expected = defarray("2022m01",\
                                "2022m02",\
                                "2022m03")
    strings actual = iso8601_to_string(input, date_format)
    loop i=1..nelem(expected)
        assert(actual[i] == expected[i])
    endloop
    assert(nelem(actual) == nelem(expected))
    print "Successful for third test part."
end function
test_iso8601_to_string_series()


nulldata 3 --preserve
function void test_iso8601_to_dates (void)
    print "Start with iso8601_to_dates()."

    # Given
    series input = {20220101, NA, 20220103}'
    strings expected = defarray("2022-01-01",\
                                "",\
                                "2022-01-03")

    # When
    strings actual = iso8601_to_dates(input)

    # Then
    loop i=1..nelem(expected)
        assert(actual[i] == expected[i])
    endloop
end function
test_iso8601_to_dates()


bundles Params = null
Params = Params + _(first = 1999, second = 4, frequency = "quarterly", expected_err = FALSE)
Params = Params + _(first = 999, second = 4, frequency = "quarterly", expected_err = TRUE)
Params = Params + _(first = 1999, second = 5, frequency = "quarterly", expected_err = TRUE)
Params = Params + _(first = 1999, second = 4, frequency = "monthly", expected_err = FALSE)
Params = Params + _(first = 999, second = 4, frequency = "monthly", expected_err = TRUE)
Params = Params + _(first = 1999, second = 13, frequency = "monthly", expected_err = TRUE)

function void test_check_frequency_ranges (const bundles P)
    print "Start testing function check_frequency_ranges()."

    loop foreach i P
        # Given + When
        catch check_frequency_ranges(P[i].first, P[i].second, P[i].frequency)
        err = $error

        # Then
        if err
            assert(P[i].expected_err == TRUE)
        else
            assert(err == P[i].expected_err)
        endif
    endloop
end function
test_check_frequency_ranges(Params)


nulldata 10 --preserve
setobs 4 2020:1 --time-series
string actual = get_frequency_label()
assert(actual == "quarterly")

setobs 12 2020:1 --time-series
string actual = get_frequency_label()
assert(actual == "monthly")

setobs 1 2020 --time-series
catch string actual = get_frequency_label()
assert($error != FALSE)

setobs 1 1 --cross-section
catch string actual = get_frequency_label()
assert($error != FALSE)



bundles Params = null
Params = Params + _(date = "1994:1", frequency = "quarterly", expected = 19940101)
Params = Params + _(date = "1994:2", frequency = "quarterly", expected = 19940401)
Params = Params + _(date = "1994.2", frequency = "quarterly", expected = 19940401)
Params = Params + _(date = "1994.2", frequency = "foo", expected = 48)
Params = Params + _(date = "1994:01", frequency = "monthly", expected = 19940101)
Params = Params + _(date = "1994:06", frequency = "monthly", expected = 19940601)

function void test_gdate_to_iso8601 (const bundles P)
    print "Start testing function gdate_to_iso8601()."

    loop foreach i P
        # Given + When
        catch scalar actual = gdate_to_iso8601(P[i].date, P[i].frequency)
        scalar err = $error

        # Then
        if err
            assert(err == P[i].expected)
        else
            assert(actual == P[i].expected)
        endif
    endloop
end function
test_gdate_to_iso8601(Params)



nulldata 10 --preserve
setobs 4 2020:1 --time-series
bundles Params = null
Params = Params + _(date = "1994:1", expected = 19940101)
Params = Params + _(date = "1994:2", expected = 19940401)
Params = Params + _(date = "1994.2", expected = 19940401)
Params = Params + _(date = "1994:01", expected = 19940101)
Params = Params + _(date = "1994:06", expected = 48)

function void test_gdate_to_iso8601_quarterly (const bundles P)
    print "Start testing function gdate_to_iso8601() without passing frequency and quarterly frequency."

    loop foreach i P
        # Given + When
        catch scalar actual = gdate_to_iso8601(P[i].date)
        scalar err = $error

        # Then
        if err
            assert(err == P[i].expected)
        else
            assert(actual == P[i].expected)
        endif
    endloop
end function
test_gdate_to_iso8601_quarterly(Params)


nulldata 10 --preserve
setobs 12 2020:1 --time-series
bundles Params = null
Params = Params + _(date = "1994:1", expected = 19940101)
Params = Params + _(date = "1994:2", expected = 19940201)
Params = Params + _(date = "1994.2", expected = 19940201)
Params = Params + _(date = "1994:01", expected = 19940101)
Params = Params + _(date = "1994:06", expected = 19940601)

function void test_gdate_to_iso8601_monthly (const bundles P)
    print "Start testing function gdate_to_iso8601() without passing frequency and monthly frequency."

    loop foreach i P
        # Given + When
        catch scalar actual = gdate_to_iso8601(P[i].date)
        scalar err = $error

        # Then
        if err
            assert(err == P[i].expected)
        else
            assert(actual == P[i].expected)
        endif
    endloop
end function
test_gdate_to_iso8601_monthly(Params)



bundles Params = null
Params = Params + _(date = "1994:1", expected = TRUE)
Params = Params + _(date = "1994.1", expected = FALSE)
Params = Params + _(date = "1994 1", expected = FALSE)

function void test_is_valid_date_delimiter (const bundles P)
    print "Start testing function is_valid_date_delimiter()."

    loop foreach i P
        # Given + When
        scalar actual = is_valid_date_delimiter(P[i].date)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_is_valid_date_delimiter(Params)



bundles Params = null
Params = Params + _(ts = defarray("2022-12-07 00:00"),
                    year = {2022}, month = {12}, day = {7},
                    hour = {0}, minute = 0,
                    date = defarray("2022-12-07"),
                    time = defarray("00:00"),
                    second1970 = {1670367600})
Params = Params + _(ts = defarray("2022-12-07 00:10"),
                    year = {2022}, month = {12}, day = {7},
                    hour = {0}, minute = 10,
                    date = defarray("2022-12-07"),
                    time = defarray("00:10"),
                    second1970 = {1670368200})
Params = Params + _(ts = defarray("2022-12-24 17:05"),
                    year = {2022}, month = {12}, day = {24},
                    hour = {17}, minute = 5,
                    date = defarray("2022-12-24"),
                    time = defarray("17:05"),
                    second1970 = {1671897900})

function void test_datetime_components_single (const bundles P)
    print "Start testing function datetime_components() single entry."

    loop foreach i P
        # Given + When
        bundle B = datetime_components(P[i].ts)
        matrix actual_year = B.year
        matrix actual_month = B.month
        matrix actual_day = B.day
        matrix actual_hour = B.hour
        matrix actual_minute = B.minute
        strings actual_date = B.date
        strings actual_time = B.time
        matrix actual_second1970 = B.second1970

        # Then
        loop foreach k actual_time
            assert(actual_year[k] == P[i].year[k])
            assert(actual_month[k] == P[i].month[k])
            assert(actual_day[k] == P[i].day[k])
            assert(actual_hour[k] == P[i].hour[k])
            assert(actual_minute[k] == P[i].minute[k])
            assert(actual_date[k] == P[i].date[k])
            assert(actual_time[k] == P[i].time[k])
            assert(actual_second1970[k] == P[i].second1970[k])
        endloop
    endloop
end function
test_datetime_components_single(Params)



bundles Params = null
Params = Params + _(ts = defarray("2022-12-07 00:00:33",
                                  "2022-12-13 14:43:12"),
                    format = "%Y-%m-%d %H:%M:%S",
                    year = {2022, 2022}, month = {12, 12}, day = {7, 13},
                    hour = {0, 14}, minute = {0, 43},
                    second = {33, 12},
                    date = defarray("2022-12-07", "2022-12-13"),
                    time = defarray("00:00:33", "14:43:12"),
                    second1970 = {1670367633, 1670938992})

Params = Params + _(ts = defarray("2022-12-07 00:10:11",
                                  "2022-12-07 00:10:12"),
                    format = "%Y-%m-%d %H:%M:%S",
                    year = {2022, 2022}, month = {12, 12}, day = {7, 7},
                    hour = {0, 0}, minute = {10, 10},
                    second = {11, 12},
                    date = defarray("2022-12-07", "2022-12-07"),
                    time = defarray("00:10:11", "00:10:12"),
                    second1970 = {1670368211, 1670368212})

function void test_datetime_components (const bundles P)
    print "Start testing function datetime_components() multiple entries."

    loop foreach i P
        # Given + When
        bundle B = datetime_components(P[i].ts, P[i].format)
        matrix actual_year = B.year
        matrix actual_month = B.month
        matrix actual_day = B.day
        matrix actual_hour = B.hour
        matrix actual_minute = B.minute
        strings actual_date = B.date
        strings actual_time = B.time
        matrix actual_second1970 = B.second1970

        # Then
        loop foreach k actual_time
            assert(actual_year[k] == P[i].year[k])
            assert(actual_month[k] == P[i].month[k])
            assert(actual_day[k] == P[i].day[k])
            assert(actual_hour[k] == P[i].hour[k])
            assert(actual_minute[k] == P[i].minute[k])
            assert(actual_date[k] == P[i].date[k])
            assert(actual_time[k] == P[i].time[k])
            assert(actual_second1970[k] == P[i].second1970[k])
        endloop
    endloop
end function
test_datetime_components(Params)

function void test_period_label_from_value (void)
    print "Start testing period_label_from_value() input."

    # monthly label
    scalar v1 = 20230315
    string r1 = period_label_from_value(v1, "monthly")
    assert(r1 == "2023m3")

    # quarterly label
    string r1q = period_label_from_value(v1, "quarterly")
    assert(r1q == "2023q1")

    # invalid frequency -> expect empty string and a warning
    string r2 = period_label_from_value(20230101, "foo")
    assert(r2 == "")

    # invalid month -> expect empty string
    string r3 = period_label_from_value(20231401, "monthly")
    assert(r3 == "")

    print "period_label_from_value() scalar tests passed."
end function
test_period_label_from_value()


function void test_iso8601_to_period_label_s (void)
    print "Start with iso8601_to_period_label() scalar input."

    # monthly (auto-detect)
    scalar date1 = 20230315
    string expected1 = "2023m3"
    strings got1 = iso8601_to_period_label(date1)
    assert(nelem(got1) == 1)
    assert(got1[1] == expected1)

    # quarterly (auto-detect)
    scalar date2 = 20230401
    string expected2 = "2023q2"
    strings got2 = iso8601_to_period_label(date2)
    assert(nelem(got2) == 1)
    assert(got2[1] == expected2)

    # explicit quarterly
    scalar date3 = 20230615
    string expected3 = "2023q2"
    strings got3 = iso8601_to_period_label(date3, "quarterly")
    assert(got3[1] == expected3)

    # invalid month -> empty string
    scalar date4 = 20231401
    string expected4 = ""
    strings got4 = iso8601_to_period_label(date4)
    assert(got4[1] == expected4)

    # non-valid date (e.g. 20231340)
    scalar date5 = 20231340
    string expected5 = ""
    strings got5 = iso8601_to_period_label(date5)
    assert(got5[1] == expected5)

    print "iso8601_to_period_label() scalar tests passed."
end function
test_iso8601_to_period_label_s()


nulldata 5 --preserve
setobs 4 2020:1 --time-series
function void test_iso8601_to_period_label_ts (void)
    print "Start with iso8601_to_period_label() time-series input."

    # monthly (auto-detect)
    series dates = $obsdate
    dates[$t2-1] = NA
    strings expected1 = defarray("2020q1", "2020q2", "2020q3", "", "2021q1")
    strings got = iso8601_to_period_label(dates)

    assert(nelem(got) == nelem(expected1))
    loop foreach i got
        assert(got[i] == expected1[i])
    endloop

    print "iso8601_to_period_label() for time-series tests passed."
end function
test_iso8601_to_period_label_ts()


nulldata 5 --preserve
setobs 1 2020 --time-series  # annual data
function void test_iso8601_to_period_label_a (void)
    print "Start with iso8601_to_period_label() annual time-series input."

    print "impose quarterly frequency"
    series dates = $obsdate
    dates[$t2-1] = NA
    strings expected1 = defarray("2020q1", "2021q1", "2022q1", "", "2024q1")
    strings got = iso8601_to_period_label(dates, "quarterly")

    assert(nelem(got) == nelem(expected1))
    loop foreach i got
        assert(got[i] == expected1[i])
    endloop

    print "auto-detect -> As freq. is not supported, returns empty strings"
    series dates = $obsdate
    dates[$t2-1] = NA
    strings expected1 = defarray("", "", "", "", "")
    strings got = iso8601_to_period_label(dates, "auto")

    assert(nelem(got) == nelem(expected1))
    loop foreach i got
        assert(got[i] == expected1[i])
    endloop

    print "iso8601_to_period_label() for monthly time-series tests passed."
end function
test_iso8601_to_period_label_a()


nulldata 7 --preserve
setobs 7 2020-01-01 --time-series  # annual data
function void test_iso8601_to_period_label_dy (void)
    print "Start with iso8601_to_period_label() daily time-series input."

    print "impose quarterly frequency"
    series dates = $obsdate
    dates[$t2-1] = NA
    strings expected1 = defarray("2020q1", "2020q1", "2020q1", "2020q1",
                                "2020q1", "", "2020q1")
    strings got = iso8601_to_period_label(dates, "quarterly")

    assert(nelem(got) == nelem(expected1))
    loop foreach i got
        assert(got[i] == expected1[i])
    endloop


    print "auto-detect -> As freq. is not supported, returns empty strings"
    series dates = $obsdate
    dates[$t2-1] = NA
    strings expected1 = defarray("", "", "", "", "", "", "")
    strings got = iso8601_to_period_label(dates)

    assert(nelem(got) == nelem(expected1))
    loop foreach i got
        assert(got[i] == expected1[i])
    endloop

    print "iso8601_to_period_label() for daily time-series tests passed."
end function
test_iso8601_to_period_label_dy()


function void test_iso8601_to_period_label_mt (void)
    print "Start with iso8601_to_period_label() matrix input."

    print "monthly auto-detect"
    matrix m1 = {20230101, 20230201, 20230601}
    strings got1 = iso8601_to_period_label(m1)
    strings exp1 = defarray("2023m1", "2023m2", "2023m6")
    loop i=1..nelem(exp1)
        assert(got1[i] == exp1[i])
    endloop

    print "quarterly auto-detect (months 1,4,7,10)"
    matrix m2 = {20230101, 20230401, 20230701, 20231001}
    strings got2 = iso8601_to_period_label(m2)
    strings exp2 = defarray("2023q1", "2023q2", "2023q3", "2023q4")
    loop i=1..nelem(exp2)
        assert(got2[i] == exp2[i])
    endloop

    print "NA handling"
    matrix m3 = {20230101; NA; 20230601}
    strings got3 = iso8601_to_period_label(m3)
    assert(got3[1] == "2023m1")
    assert(got3[2] == "")
    assert(got3[3] == "2023m6")

    print "explicit frequency: monthly (override auto-detect)"
    strings got1m = iso8601_to_period_label(m1, "monthly")
    loop i=1..nelem(exp1)
        assert(got1m[i] == exp1[i])
    endloop

    # explicit unsupported frequency: 'annual' -> expect empty labels
    matrix m4 = {20230101, 20240101}
    strings got4 = iso8601_to_period_label(m4, "annual")
    assert(got4[1] == "")
    assert(got4[2] == "")

    print "iso8601_to_period_label() matrix tests passed."
end function
test_iso8601_to_period_label_mt()


quit
